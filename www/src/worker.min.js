!function(t){function o(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}var e={};o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},o.p="",o(o.s=0)}([function(t,o,e){"use strict";var r=e(1);self.addEventListener("message",function(t){if(t.data&&t.data.game&&t.data.playAgainstAI){var o=(0,r.AI)(t.data.playAgainstAI.depth,t.data.game,!0);self.postMessage(o)}})},function(t,o,e){!function(o,e){t.exports=e()}("undefined"!=typeof self&&self,function(){return function(t){function o(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,o),i.l=!0,i.exports}var e={};return o.m=t,o.c=e,o.d=function(t,e,r){o.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,o){return Object.prototype.hasOwnProperty.call(t,o)},o.p="",o(o.s=2)}([function(t,o,e){"use strict";function r(t){this.board=[];for(var o=0;o<8;o++){for(var e=[],r=0;r<8;r++)e.push(null);this.board.push(e)}this.turn=[],this.FEN=[],this.FENboard=[],this.threefold=[]}Object.defineProperty(o,"__esModule",{value:!0});var i=e(1);r.prototype.piece=function(t,o,e,r){var n=i.Piece[t](o,e,r,this);this.board[e][o]=n,this.FEN=this.gameToFEN(),this.FENboard=this.boardToFEN()},r.prototype.moveSelected=function(t,o,e,r,i){var n=o.x,a=o.y;if(t){var c={x:t.x,y:t.y};if(this.board[a][n]!==t){for(var u=t.getValidMoves(!i),s=null,l=0;l<u.length;l++){var p=u[l];if(p.x===n&&p.y===a){s=p;break}}if(!s)return!1;var f,h,y,v=s.movePiece;v&&(f=v.from,h=v.to,null===h?this.board[f.y][f.x]=null:(y=this.board[f.y][f.x],this.board[h.y][h.x]=y,y.x=h.x,y.y=h.y,this.board[f.y][f.x]=null));var d=this.board[a][n]?this.board[a][n]:null;v=v?s.movePiece:null,this.turn.push({from:c,to:o,color:t.color,type:t.type,piece:d,movePiece:v}),this.board[a][n]=t,this.board[t.y][t.x]=null,this.board[a][n].x=n,this.board[a][n].y=a,this.FEN=this.gameToFEN(),this.FENboard=this.boardToFEN(),this.threefold.push(this.FENboard),("pawn"===t.type||d)&&(this.threefold=[]),this.threefoldCheck()&&r("D"),this.halfmoveClock()>=50&&r("D"),"pawn"===t.type&&a!==t.y&&("W"===t.color&&0===a||"B"===t.color&&7===a)&&e&&e(t,n,a,t.color);var m="W"===t.color?"B":"W",g=this.checkmate(m);g&&r(g)}return t=null,!0}},r.prototype.promotePawn=function(t,o,e,r,i){this.piece(i,o,e,r)},r.prototype.simulateAndFilter=function(t,o){var e=[],r=this,i=this.board;return t.forEach(function(t,n){var a=t.y,c=t.x,u={x:o.x,y:o.y},s=i[a][c]?{piece:i[a][c],from:{x:c,y:a},to:null}:null;t.movePiece&&(s=t.movePiece),s&&r.simpleMovePiece(s.piece,s.from,s.to),r.simpleMovePiece(o,u,{x:c,y:a});var l=r.warning(o.color);r.simpleMovePiece(o,{x:c,y:a},u),s&&r.simpleMovePiece(s.piece,s.to,s.from),l||e.push(t)}),e},r.prototype.checkmate=function(t){for(var o=0;o<8;o++)for(var e=0;e<8;e++)if(this.board[o][e]&&this.board[o][e].color===t&&this.board[o][e].getValidMoves(!0).length)return!1;return this.warning(t)?t:"D"},r.prototype.simpleMovePiece=function(t,o,e){var r=this.board;e&&(r[e.y][e.x]=t,t.x=e.x,t.y=e.y),o&&(r[o.y][o.x]=null)},r.prototype.simpleMove=function(t){var o=this,e=o.board,r=t.from,i=t.to,n=e[r.y][r.x],a=this.board[i.y][i.x]?this.board[i.y][i.x]:null,c=e[i.y][i.x]?{piece:e[i.y][i.x],from:{x:i.x,y:i.y},to:null}:null;return this.turn.push({from:r,to:{x:i.x,y:i.y},color:t.color,type:n.type,piece:a,movePiece:c}),i.movePiece&&(c=i.movePiece),c&&o.simpleMovePiece(c.piece,c.from,c.to),o.simpleMovePiece(n,r,{x:i.x,y:i.y}),function(){c&&o.simpleMovePiece(c.piece,c.to,c.from),o.simpleMovePiece(n,{x:i.x,y:i.y},r),a&&(e[i.y][i.x]=a),o.turn.pop()}},r.prototype.warning=function(t){var o,e=!1;return this.board.forEach(function(e){e.forEach(function(e){e&&e.color===t&&"king"===e.type&&(o=e)})}),this.board.forEach(function(r){r.forEach(function(r){r&&r.color!==t&&r.getValidMoves().forEach(function(t){t.x===o.x&&t.y===o.y&&(e=!0)})})}),e},r.prototype.threefoldCheck=function(){for(var t=this.threefold,o=t.length,e=0;e<o;e++){for(var r=0,i=e+1;i<o;i++)t[e]===t[i]&&(r+=1);if(r>=2)return!0}return!1},r.prototype.pieceToAN=function(t,o){return"abcdefgh".charAt(t)+(8-o)},r.prototype.boardToFEN=function(){for(var t=this.board,o="",e=0,r=0;r<8;r++){for(var i=0;i<8;i++)t[r][i]?(e&&(o+=e),e=0,o+=t[r][i].FENname):e++;e&&(o+=e),e=0,o+=r<7?"/":""}return o},r.prototype.halfmoveClock=function(){var t=this.turn,o=t.length,e=0;if(0===t.length)return e;for(var r=t[o-1-e];e<=o-1&&"pawn"!==r.type&&!r.piece;)e++,r=t[o-1-e];return e},r.prototype.activeColour=function(){var t=this.turn;return t.length&&"W"===t[t.length-1].color?"b":"w"},r.prototype.castlingTarget=function(){var t,o,e=this.board,r=this.turn,i="";return r.forEach(function(e){t="king"===e.type&&"W"===e.color,o="king"===e.type&&"B"===e.color}),[[7,0],[0,0],[7,7],[0,7]].forEach(function(n){var a=n[0],c=n[1],u=e[c][a];if((7!==c||!t)&&(0!==c||!o)&&u&&"rook"!==!u.type&&!r.some(function(t){return"rook"===t.type&&(t.from.x===a&&t.from.y===c)})){var s=0===a?"q":"k";i+=0===c?s.toUpperCase():s}}),i||(i="-"),i},r.prototype.enPassantTarget=function(){var t=this.turn,o="";if(t.length){var e=t[t.length-1];"W"===e.color&&4===e.to.y&&(o=this.pieceToAN(e.to.x,e.to.y+1)),"B"===e.color&&3===e.to.y&&(o=this.pieceToAN(e.to.x,e.to.y-1))}return o||(o="-"),o},r.prototype.fullmoveCount=function(){var t=1;return this.turn.forEach(function(o){"B"===o.color&&(t+=1)}),t},r.prototype.gameToFEN=function(){var t="";return t+=this.boardToFEN(),t+=" "+this.activeColour(),t+=" "+this.castlingTarget(),t+=" "+this.enPassantTarget(),t+=" "+this.halfmoveClock(),t+=" "+this.fullmoveCount()},r.prototype.initializeGame=function(){for(var t=new r,o=0;o<8;o++)t.piece("pawn",o,6,"W"),t.piece("pawn",o,1,"B");return t.piece("rook",0,0,"B"),t.piece("knight",1,0,"B"),t.piece("bishop",2,0,"B"),t.piece("queen",3,0,"B"),t.piece("king",4,0,"B"),t.piece("bishop",5,0,"B"),t.piece("knight",6,0,"B"),t.piece("rook",7,0,"B"),t.piece("rook",0,7,"W"),t.piece("knight",1,7,"W"),t.piece("bishop",2,7,"W"),t.piece("queen",3,7,"W"),t.piece("king",4,7,"W"),t.piece("bishop",5,7,"W"),t.piece("knight",6,7,"W"),t.piece("rook",7,7,"W"),t},r.prototype.allMoves=function(){for(var t=this.board,o=[],e=this.activeColour().toUpperCase(),r=0;r<8;r++)for(var i=0;i<8;i++)if(t[r][i]&&t[r][i].color===e){var n=t[r][i].getValidMoves(!0);n.forEach(function(e){o.push({color:t[r][i].color,from:{x:i,y:r},to:e,FENname:t[r][i].FENname})})}return o},o.default=r},function(t,o,e){"use strict";function r(t,o,e,r,i,n){if(e&&(this.char=e[r]),this.color=r,this.x=t,this.y=o,this.game=i,this.type=n,n){var a="knight"===n?"n":n.charAt(0);"W"===this.color&&(a=a.toUpperCase()),this.FENname=a}}function i(t,o,e,i){r.call(this,t,o,l.pawn,e,i,"pawn")}function n(t,o,e,i){r.call(this,t,o,l.rook,e,i,"rook")}function a(t,o,e,i){r.call(this,t,o,l.knight,e,i,"knight")}function c(t,o,e,i){r.call(this,t,o,l.bishop,e,i,"bishop")}function u(t,o,e,i){r.call(this,t,o,l.queen,e,i,"queen")}function s(t,o,e,i){r.call(this,t,o,l.king,e,i,"king")}Object.defineProperty(o,"__esModule",{value:!0});var l=o.PIECE_CHARS={pawn:{W:"♙",B:"♟"},rook:{W:"♖",B:"♜"},knight:{W:"♘",B:"♞"},bishop:{W:"♗",B:"♝"},queen:{W:"♕",B:"♛"},king:{W:"♔",B:"♚"}};r.empty=function(){return new r},r.prototype.getValidMoves=function(){return[{x:0,y:0},{x:7,y:7}]},i.prototype=r.empty(),i.prototype.getValidMoves=function(t){var o,e,r=this.game,i=[],n=this.y,a=this.x,c=r.board,u=r.turn,s=u.length,l="W"===this.color?n-1:n+1,p="W"===this.color?n-2:n+2,f=(this.color,[a-1,a+1]);l<8&&l>=0&&!c[l][a]&&(i.push({x:a,y:l}),(1===n||6===n)&&p<8&&p>=0&&!r.board[p][a]&&i.push({x:a,y:p}));for(var h=0;h<2;h++)e=f[h],l<8&&l>=0&&c[l][e]&&c[l][e].color!==this.color&&i.push({x:e,y:l});for(var y=0;y<2;y++)e=f[y],!(o=u[s-1])||"pawn"!==o.type||o.to.x!==e||o.to.y!==n||o.color===this.color||1!==o.from.y&&6!==o.from.y||3!==n&&4!==n||i.push({x:e,y:l,movePiece:{piece:r.board[n][e],from:{x:e,y:n},to:null}});return t?r.simulateAndFilter(i,this):i},r.pawn=function(t,o,e,r){return new i(t,o,e,r)},n.prototype=r.empty(),n.prototype.getValidMoves=function(t){var o=this.game,e=[];[[-1,0],[1,0],[0,1],[0,-1]].forEach(function(t){var r,i,n,a;for(r=1;(i=this.x+t[0]*r,!((n=this.y+t[1]*r)<0||n>7||i<0||i>7))&&(!(a=o.board[n][i])||a.color!==this.color)&&(e.push({x:i,y:n}),!a);r++);},this);return t?o.simulateAndFilter(e,this):e},r.rook=function(t,o,e,r){return new n(t,o,e,r)},a.prototype=r.empty(),a.prototype.getValidMoves=function(t){for(var o,e,r=this.game,i=[],n=[[2,1],[-2,1],[1,2],[-1,2],[2,-1],[-2,-1],[1,-2],[-1,-2]],a=0;a<n.length;a++){var c,u=!1;o=n[a][0],e=n[a][1],this.x+o<8&&this.x+o>=0&&this.y+e<8&&this.y+e>=0&&(c=r.board[this.y+e][this.x+o],u=!c||c.color!==this.color),u&&i.push({x:this.x+o,y:this.y+e})}return t?r.simulateAndFilter(i,this):i},r.knight=function(t,o,e,r){return new a(t,o,e,r)},c.prototype=r.empty(),c.prototype.getValidMoves=function(t){var o=this.game,e=[];[[-1,-1],[1,1],[-1,1],[1,-1]].forEach(function(t){var r,i,n,a;for(r=1;(i=this.x+t[0]*r,!((n=this.y+t[1]*r)<0||n>7||i<0||i>7))&&(!(a=o.board[n][i])||a.color!==this.color)&&(e.push({x:i,y:n}),!a);r++);},this);return t?o.simulateAndFilter(e,this):e},r.bishop=function(t,o,e,r){return new c(t,o,e,r)},u.prototype=r.empty(),u.prototype.getValidMoves=function(t){var o=this.game,e=n.prototype.getValidMoves.call(this),r=c.prototype.getValidMoves.call(this),i=e.concat(r);return t?o.simulateAndFilter(i,this):i},r.queen=function(t,o,e,r){return new u(t,o,e,r)},s.prototype=r.empty(),s.prototype.getValidMoves=function(t){var o=[],e=[[0,1],[0,-1],[1,1],[-1,-1],[1,-1],[-1,1],[-1,0],[1,0]],r=this.x,i=this.y,n=this.game,a=n.turn,c=this;e.forEach(function(t){var e,a=r+t[0],u=i+t[1];a<8&&a>=0&&u<8&&u>=0&&((e=n.board[u][a])&&e.color===c.color||o.push({x:a,y:u}))}),a.some(function(t){return"king"===t.type&&t.color===c.color})||[[0,2,-1],[7,6,1]].forEach(function(t){var e=t[0],u=t[1],s=t[2],l=n.board[i][e];if(l&&"rook"!==!l.type&&!a.some(function(t){return t.from.x===e&&t.from.y===i})){for(var p=r+s;p!==e;p+=s){if(n.board[i][p])return;var f=!0;if(n.board.forEach(function(t){t.forEach(function(t){t&&"king"!==t.type&&t.color!==c.color&&t.getValidMoves().forEach(function(t){t&&t.y===i&&t.x===p&&(f=!1)})})}),!f)return}var h={x:u,y:i,movePiece:{piece:c.game.board[i][e],from:{x:e,y:i},to:{y:i,x:r+s}}};o.push(h)}});return t?n.simulateAndFilter(o,c):o},r.king=function(t,o,e,r){return new s(t,o,e,r)},o.Piece=r,o.Pawn=i,o.Rook=n,o.Knight=a,o.Bishop=c,o.Queen=u,o.King=s},function(t,o,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}Object.defineProperty(o,"__esModule",{value:!0}),o.AI=o.Pieces=o.Game=void 0;var i=e(0),n=r(i),a=e(1),c=function(t){if(t&&t.__esModule)return t;var o={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(o[e]=t[e]);return o.default=t,o}(a),u=e(3),s=r(u);o.Game=n.default,o.Pieces=c,o.AI=s.default},function(t,o,e){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var r=e(0),i=function(t){return t&&t.__esModule?t:{default:t}}(r),n=function(t,o,e){for(var r=i.default.prototype.initializeGame(),n=0;n<8;n++)for(var c=0;c<8;c++)if(o.board[n][c]){var u=o.board[n][c];r.piece(u.type,c,n,u.color)}else r.board[n][c]=null;r.turn=o.turn,r.threefold=o.threefold,r.FEN=o.FEN,r.FENboard=o.FENboard;for(var s,l=r.allMoves(),p=-9999,n=0;n<l.length;n++){var f=l[n],h=r.simpleMove(f),y=a(t-1,r,-1e4,1e4,!e);h(),y>=p&&(p=y,s=f)}return s},a=function t(o,e,r,i,n){if(0===o)return-c(e.board);var a=e.allMoves();if(n){for(var u=-9999,s=0;s<a.length;s++){var l=e.simpleMove(a[s]);if(u=Math.max(u,t(o-1,e,r,i,!n)),l(),r=Math.max(r,u),i<=r)return u}return u}for(var p=9999,f=0;f<a.length;f++){var h=e.simpleMove(a[f]);if(p=Math.min(p,t(o-1,e,r,i,!n)),h(),(i=Math.min(i,p))<=r)return p}return p},c=function(t){for(var o=0,e=0;e<8;e++)for(var r=0;r<8;r++)o+=u(t[e][r]);return o},u=function(t){if(null===t)return 0;var o=function(t){return"pawn"===t.type?10:"rook"===t.type?50:"knight"===t.type?30:"bishop"===t.type?30:"queen"===t.type?90:"king"===t.type?900:void 0}(t,t.color);return"W"===t.color?o:-o};o.default=n}])})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,